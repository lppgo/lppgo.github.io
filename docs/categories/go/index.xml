<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go on Even - A super concise theme for Hugo</title><link>https://lppgo.github.io/categories/go/</link><description>Recent content in Go on Even - A super concise theme for Hugo</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 10 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://lppgo.github.io/categories/go/index.xml" rel="self" type="application/rss+xml"/><item><title>01-Go Dockerfile</title><link>https://lppgo.github.io/post/golang/026_godockerfile%E6%A8%A1%E6%9D%BF/</link><pubDate>Thu, 10 Mar 2022 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/golang/026_godockerfile%E6%A8%A1%E6%9D%BF/</guid><description>Go Dockerfile模板 1： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 FROMgolang:alpine AS builderLABEL stage=gobuilder ENV CGO_ENABLED 0ENV GOOS linuxENV GOPROXY https://goproxy.cn,directWORKDIR/buildADD go.mod .ADD go.sum .RUN go mod downloadCOPY . .RUN go build -ldflags=&amp;#34;-s -w&amp;#34; -o /app/hello ./hello.goFROMalpineRUN apk update</description></item><item><title>01-适用于Go项目的Makefile指南</title><link>https://lppgo.github.io/post/golang/027_%E9%80%82%E7%94%A8%E4%BA%8Ego%E9%A1%B9%E7%9B%AE%E7%9A%84makefile%E6%8C%87%E5%8D%97/</link><pubDate>Thu, 10 Mar 2022 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/golang/027_%E9%80%82%E7%94%A8%E4%BA%8Ego%E9%A1%B9%E7%9B%AE%E7%9A%84makefile%E6%8C%87%E5%8D%97/</guid><description>适用于Go项目的Makefile指南 Table of Contents ================= Table of Contents 1: Premise 2: Makefile 语法 3: Go 项目 4: supplementary instruction 1: Premise 会使用 go 写项目 会使用 Makefile 2: Makefile 语法 1 2 3 4 5 6 7 8 9 10 11 12 PROJECT=&amp;#34;example&amp;#34; default: echo</description></item><item><title>01-Go-transaction事务几种方式</title><link>https://lppgo.github.io/post/golang/025_go-transaction%E4%BA%8B%E5%8A%A1%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</link><pubDate>Mon, 07 Feb 2022 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/golang/025_go-transaction%E4%BA%8B%E5%8A%A1%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</guid><description>Go-transaction事务几种方式 1：方式一 这种写法非常朴实，程序流程也非常明确，但是事务处理与程序流程嵌入太深，容易遗漏，造成严重的</description></item><item><title>01-Go Test笔记</title><link>https://lppgo.github.io/post/golang/023_go-test%E7%AC%94%E8%AE%B0/</link><pubDate>Tue, 21 Dec 2021 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/golang/023_go-test%E7%AC%94%E8%AE%B0/</guid><description>Go Test笔记 Go Test 一个完整的单测指令可以是 go test -v -cover -gcflags=all=-l -coverprofile=coverage.out -gcflags=all=-l 防止编译器内联优化导致单测出现问题 1.1 go test go test -run=^TestDo -v ./ 这里介绍几个常用的参数： -bench regexp 执行相</description></item><item><title>01-Grpc with TLS/SSL</title><link>https://lppgo.github.io/post/golang/021-grpc-witch-tls/</link><pubDate>Fri, 17 Dec 2021 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/golang/021-grpc-witch-tls/</guid><description>Grpc with TLS/SSL 1 Grpc 配置 TLS/SSL 1.1 使用 openssl 生成证书 cert 2 Server 服务端 3 Client 客户端 1 Grpc 配置 TLS/SSL gRPC 支持身份验证（auth）。将它添加到您的项目中很简单。您所要做的就是使用几</description></item><item><title>01-go使用Linux内核端口复用进行LoadBalance</title><link>https://lppgo.github.io/post/golang/019-go%E4%BD%BF%E7%94%A8linux%E5%86%85%E6%A0%B8%E7%AB%AF%E5%8F%A3%E5%A4%8D%E7%94%A8%E8%BF%9B%E8%A1%8Cloadbalance/</link><pubDate>Tue, 12 Oct 2021 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/golang/019-go%E4%BD%BF%E7%94%A8linux%E5%86%85%E6%A0%B8%E7%AB%AF%E5%8F%A3%E5%A4%8D%E7%94%A8%E8%BF%9B%E8%A1%8Cloadbalance/</guid><description>1 查看 Linux Kernal 2 Golang 如何使用端口复用 2.1 说明 2.2 Go ReusePort 2.2.1 go server 2.2.2 调用测试 2.2.3 端口复用 REUSEPORT 好处 1 查看 Linux Kernal socket 五元组 {&amp;lt;protocol&amp;gt;, &amp;lt;src addr&amp;gt;, &amp;lt;src port&amp;gt;, &amp;lt;dest addr&amp;gt;, &amp;lt;dest port&amp;gt;} uname -a Linux 3.9 内核引入了 SO_REU</description></item><item><title>01-grpc安装(cpp和go)</title><link>https://lppgo.github.io/post/golang/017-grpc%E5%AE%89%E8%A3%85cpp%E5%92%8Cgo/</link><pubDate>Fri, 08 Oct 2021 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/golang/017-grpc%E5%AE%89%E8%A3%85cpp%E5%92%8Cgo/</guid><description>1 c++ 配置 GRPC 1.1 setup dir 1.2 install cmake 1.3 Install other required tools 1.4 git clone grpc repo 1.5 Build and install gRPC and Protocol Buffers 1.6 编写 proto 文件 1.7 编写 server/client 文件 1.8 执行 2 golang grpc 环境搭建 2.1 Prerequisites golang protobuffer 2.2 Get the example code 1 c++ 配置 GRPC https://grpc.io/docs/languages/cpp/quickstart/ 1.1 setup dir 1</description></item><item><title>01-Golang Files and I/O</title><link>https://lppgo.github.io/post/golang/015-file-and-io/</link><pubDate>Tue, 10 Aug 2021 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/golang/015-file-and-io/</guid><description>Golang Files and I/O Table of Contents Table of Contents 一：读文件 1.1 读一个 whole 文件 1.2 读一个文件，close 1.3 read file by line 二：写文件 2.1 Write the whole file 2.2 Open file for writing 2.3 Open file for appending 2.4 Write to a file 2.5 File permissions when creating files</description></item><item><title>01-Convert json to csv</title><link>https://lppgo.github.io/post/golang/011-convert-json-to-csv/</link><pubDate>Wed, 09 Jun 2021 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/golang/011-convert-json-to-csv/</guid><description>Table of Contents Table of Contents 1: Convert json to csv 1.1 json 文件 1.2 convert 1: Convert json to csv 1.1 json 文件 company.json 1 2 3 4 5 6 7 [ { &amp;#34;App&amp;#34;: &amp;#34;Instagram&amp;#34;, &amp;#34;Company&amp;#34;: &amp;#34;Facebook&amp;#34;, &amp;#34;Category&amp;#34;: &amp;#34;Social Media&amp;#34; }, { &amp;#34;App&amp;#34;: &amp;#34;WeChat&amp;#34;, &amp;#34;Company&amp;#34;: &amp;#34;Tencent&amp;#34;, &amp;#34;Category&amp;#34;: &amp;#34;Social Media&amp;#34; }, { &amp;#34;App&amp;#34;: &amp;#34;Hotstar&amp;#34;, &amp;#34;Company&amp;#34;: &amp;#34;Disney&amp;#34;, &amp;#34;Category&amp;#34;: &amp;#34;Entertainment&amp;#34; }, { &amp;#34;App&amp;#34;: &amp;#34;CNBC&amp;#34;, &amp;#34;Company&amp;#34;: &amp;#34;Comcast&amp;#34;, &amp;#34;Category&amp;#34;: &amp;#34;News&amp;#34; }, {</description></item><item><title>02-Go编译相关</title><link>https://lppgo.github.io/post/golang/009-go%E7%BC%96%E8%AF%91%E7%9B%B8%E5%85%B3/</link><pubDate>Thu, 06 May 2021 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/golang/009-go%E7%BC%96%E8%AF%91%E7%9B%B8%E5%85%B3/</guid><description>1: go 交叉编译 1.1 查看可支 platform 1.2 Go 交叉编译命令 1.3 编译命令 1.4 编译时传入参数 2: shell 脚本 3: Makefile 1: go 交叉编译 1.1 查看可支 platform 1 2 3 go tool dist list // 支持的OS跟ARCH 1.2</description></item><item><title>01-Go语言 grpc入门教程</title><link>https://lppgo.github.io/post/golang/007-go%E8%AF%AD%E8%A8%80-grpc%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</link><pubDate>Wed, 28 Apr 2021 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/golang/007-go%E8%AF%AD%E8%A8%80-grpc%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</guid><description>go 语言 grpc 入门教程 1: 安装 go 语言 grpc 包 2:安装 protobuf 编译器 2.1 安装 protoc 编译器 2.2 安装编译器 go 语言插件 3: Example 目录结构 4: 定义服务 5: 编译 proto 协议文件 6: 实现服务端代码 7</description></item><item><title>01-Golang net/http 性能优化</title><link>https://lppgo.github.io/post/golang/005-net.http-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</link><pubDate>Sat, 24 Apr 2021 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/golang/005-net.http-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</guid><description>Golang net/http 性能优化 1: 使用 DefaultClient 2: 使用默认的 DefaultTransport 3: 解决办法是自己设置 DefaultMaxIdleConnsPerHost Golang net/http 性能优化 Go 语言内置 net\http 包十分优秀，我们通过这个包可以很方便的去实现 HTTP 的客户端和服务</description></item><item><title>01-Go开发效率神器汇总</title><link>https://lppgo.github.io/post/golang/001-go%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E7%A5%9E%E5%99%A8%E6%B1%87%E6%80%BB/</link><pubDate>Sat, 17 Apr 2021 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/golang/001-go%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E7%A5%9E%E5%99%A8%E6%B1%87%E6%80%BB/</guid><description>Table of Contents Table of Contents 1：开发工具 2：调试工具 3：网络工具 1：开发工具 1: sql2go sql 语句转换为 Go 结构体，使用 ddl。 http://stming.cn/tool/sql2go.html 2: json2go 将 json 格式转为 Go struct https://mholt.github.io/json-to-go/ 3: toml2go 将编码后的 toml 文</description></item><item><title>01-Go格式化占位符汇总</title><link>https://lppgo.github.io/post/golang/002-go%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%8D%A0%E4%BD%8D%E7%AC%A6%E6%B1%87%E6%80%BB/</link><pubDate>Sat, 17 Apr 2021 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/golang/002-go%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%8D%A0%E4%BD%8D%E7%AC%A6%E6%B1%87%E6%80%BB/</guid><description>Go格式化占位符汇总 1：通用占位符 placeholder 2：布尔型 bool 3: 整型 4: 浮点型与复数 5: 字符串和[]byte 6: 指针 Pointer 7: 宽度(精度)标识符 8：其他 falg</description></item><item><title>02-Go常用库积累</title><link>https://lppgo.github.io/post/golang/003-go%E5%B8%B8%E7%94%A8%E5%BA%93%E7%A7%AF%E7%B4%AF/</link><pubDate>Sat, 17 Apr 2021 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/golang/003-go%E5%B8%B8%E7%94%A8%E5%BA%93%E7%A7%AF%E7%B4%AF/</guid><description>1：日志库 2：配置库 3：存储相关 4：数据结构 5：CLI 命令行 6：web 框架 7：RPC 和微服务 7.1 Remote Procedure Call 7.1.1 原生 RPC 7.1.2 GRPC 7.1.2.1 GRPC 安装 7.1.2.2 GRPC 使用 7.1.2.3 GRPC 测试 7.1.2.4 GRPC</description></item></channel></rss>