<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Even - A super concise theme for Hugo</title><link>https://lppgo.github.io/post/</link><description>Recent content in Posts on Even - A super concise theme for Hugo</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 24 Sep 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://lppgo.github.io/post/index.xml" rel="self" type="application/rss+xml"/><item><title>10分钟搞定pandas+实例</title><link>https://lppgo.github.io/post/python/005-10%E5%88%86%E9%92%9F%E6%90%9E%E5%AE%9Apandas/</link><pubDate>Sat, 24 Sep 2022 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/python/005-10%E5%88%86%E9%92%9F%E6%90%9E%E5%AE%9Apandas/</guid><description>1：什么是 pandas 2：十分钟搞定 pandas（译文+注释） 3：创建对象 4：查看数据 5：选择数据 6：缺失数据处理 7：相关操作 8：合并 9：分组 10：重</description></item><item><title>go实现并发文件传输，断点续传</title><link>https://lppgo.github.io/post/golang/033_go%E5%B9%B6%E5%8F%91%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E6%96%AD%E7%82%B9%E7%BB%AD%E4%BC%A0/</link><pubDate>Sat, 24 Sep 2022 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/golang/033_go%E5%B9%B6%E5%8F%91%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E6%96%AD%E7%82%B9%E7%BB%AD%E4%BC%A0/</guid><description>go实现并发文件传输，断点续传 1: 概述 很多文件基本都是多协程下载文件要么就只有单协程的断点续传，这里给大家写一个支持有进度条的多协程下载文件，</description></item><item><title>goplugin功能</title><link>https://lppgo.github.io/post/golang/031_goplugin%E5%8A%9F%E8%83%BD/</link><pubDate>Tue, 20 Sep 2022 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/golang/031_goplugin%E5%8A%9F%E8%83%BD/</guid><description>Go Plugin插件(so动态库) 1: 官方实现 golang 1.8 及以上版本提供了一个创建共享库（shared object）的新工具，称为 Plugins。 目前 Plugins</description></item><item><title>01-python好用的脚本</title><link>https://lppgo.github.io/post/python/009-python%E5%A5%BD%E7%94%A8%E7%9A%84%E8%84%9A%E6%9C%AC/</link><pubDate>Thu, 01 Sep 2022 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/python/009-python%E5%A5%BD%E7%94%A8%E7%9A%84%E8%84%9A%E6%9C%AC/</guid><description>1：图片处理 1.1 截图 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #! /usr/bin/env python3 # encoding=utf-8 from mss import mss import PIL.ImageGrab def screenshot_1(): &amp;#34;&amp;#34;&amp;#34;python 截屏方法1 mss &amp;#34;&amp;#34;&amp;#34; with mss() as screenshot: screenshot.shot(output=&amp;#34;scr.png&amp;#34;) def</description></item><item><title>01-k8s部署</title><link>https://lppgo.github.io/post/dockerk8s/017-k8s%E9%83%A8%E7%BD%B2/</link><pubDate>Sun, 21 Aug 2022 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/dockerk8s/017-k8s%E9%83%A8%E7%BD%B2/</guid><description>k8s安装部署 https://github.com/labring/sealos</description></item><item><title>01-可观测性</title><link>https://lppgo.github.io/post/dockerk8s/019-%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/</link><pubDate>Sun, 21 Aug 2022 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/dockerk8s/019-%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/</guid><description>云原生可观测性 1: OPLG 是什么 随着云原生架构的兴起，可观测的边界与分工被重新定义，传统的容器/应用/业务分层监控边界被打破，Dev、Ops、Sec</description></item><item><title>01-001-linux安装多版本python环境</title><link>https://lppgo.github.io/post/python/001-linux%E5%AE%89%E8%A3%85%E5%A4%9A%E7%89%88%E6%9C%ACpython%E7%8E%AF%E5%A2%83/</link><pubDate>Mon, 08 Aug 2022 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/python/001-linux%E5%AE%89%E8%A3%85%E5%A4%9A%E7%89%88%E6%9C%ACpython%E7%8E%AF%E5%A2%83/</guid><description>1：简介 2：Linux 安装多个版本 python 2.1 下载 python 安装包 2.2 update-alternative 管理多版本 python 3: pip 源设置 1：简介 使用源码安装多个版本 python 环境，对系统原有 py 不影响 2：Lin</description></item><item><title>01-kafka</title><link>https://lppgo.github.io/post/%E4%B8%AD%E9%97%B4%E4%BB%B6/003-kafka/</link><pubDate>Fri, 05 Aug 2022 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/%E4%B8%AD%E9%97%B4%E4%BB%B6/003-kafka/</guid><description>消息队列Kafka 1: Introduction 2: Arch 架构 3: 可视化 tools 1 2 // kafka-map https://github.com/dushixiang/kafka-map</description></item><item><title>01-有趣项目记录</title><link>https://lppgo.github.io/post/others/009-%E6%9C%89%E8%B6%A3%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/</link><pubDate>Thu, 04 Aug 2022 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/others/009-%E6%9C%89%E8%B6%A3%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/</guid><description>有趣项目记录 1: 工具类 2: 好玩类 2.1 自动发送暖心邮件 1 https://github.com/Vincedream/NodeMail 2.2 土味情话生成器 1 https://github.com/zerosoul/honeyed-words-generator 3: 文件传输 1 2 3 // tl-rtc-file // 用webrt在web端传输文件，支持传输超大文件</description></item><item><title>01-ffmpeg-音视频</title><link>https://lppgo.github.io/post/python/003-ffmpeg-%E9%9F%B3%E8%A7%86%E9%A2%91/</link><pubDate>Wed, 27 Jul 2022 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/python/003-ffmpeg-%E9%9F%B3%E8%A7%86%E9%A2%91/</guid><description>1：简介 2：获取视频信息 3：镜像处理 4：添加水印 5：视频截取 6：视频拼接 1：简介 FFmpeg 是一套强大的音视频处理程序，也是很多音视频软件的基础，事实</description></item><item><title>01-Python第三方库大全</title><link>https://lppgo.github.io/post/python/007-python%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E5%A4%A7%E5%85%A8/</link><pubDate>Sun, 10 Jul 2022 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/python/007-python%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E5%A4%A7%E5%85%A8/</guid><description>1：包管理和依赖工具 2：分发 3：配置相关的库 4：文件操作相关的库 5：日期和时间 6：文本处理相关 6.1 通用 6.2 slug 化 6.3 解析器 6.4 PDF 6.5 Markdown 7：CLI 命令行工</description></item><item><title>01-常见编程语言-如何在命令行编译并运行</title><link>https://lppgo.github.io/post/others/007-%E5%B8%B8%E8%A7%81%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80-%E5%A6%82%E4%BD%95%E5%9C%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%BC%96%E8%AF%91%E5%B9%B6%E8%BF%90%E8%A1%8C/</link><pubDate>Tue, 05 Jul 2022 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/others/007-%E5%B8%B8%E8%A7%81%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80-%E5%A6%82%E4%BD%95%E5%9C%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%BC%96%E8%AF%91%E5%B9%B6%E8%BF%90%E8%A1%8C/</guid><description>常见编程语言-如何在命令行编译并运行 1 : Summary 2 : java 编译与运行 2.1 环境准备 2.2 编写代码 2.3 编译运行 3 : go 编译与运行 3.1 环境准备 3.2 编写代码 3.3 编译运行 4 : c</description></item><item><title>Go项目一般性组织结构</title><link>https://lppgo.github.io/post/golang/030_go%E9%A1%B9%E7%9B%AE%E4%B8%80%E8%88%AC%E6%80%A7%E7%BB%84%E7%BB%87%E7%BB%93%E6%9E%84/</link><pubDate>Sat, 25 Jun 2022 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/golang/030_go%E9%A1%B9%E7%9B%AE%E4%B8%80%E8%88%AC%E6%80%A7%E7%BB%84%E7%BB%87%E7%BB%93%E6%9E%84/</guid><description>Go项目一般性组织结构 1: summary 2: 其他一些规划方案 3: 自己的规划组织方式 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 ├── cmd/ │ └── main.go //启</description></item><item><title>01-ClickHouse常用sql脚本</title><link>https://lppgo.github.io/post/database/007-clickhouse%E5%B8%B8%E7%94%A8sql%E8%84%9A%E6%9C%AC/</link><pubDate>Tue, 07 Jun 2022 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/database/007-clickhouse%E5%B8%B8%E7%94%A8sql%E8%84%9A%E6%9C%AC/</guid><description>ClickHouse常用sql脚本 一: ClickHouse 介绍 ClickHouse 是一个用于联机分析(OLAP)的列式数据库管理系统(DBMS). https://clickhouse.com/docs/zh/ 数据文件路径： /var/lib/clickhouse/ 日志文件路径</description></item><item><title>01-docker cheat sheet</title><link>https://lppgo.github.io/post/dockerk8s/015-docker-cheat-sheet/</link><pubDate>Mon, 06 Jun 2022 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/dockerk8s/015-docker-cheat-sheet/</guid><description>Docker Cheat Sheet 1: Process Management 2: Images/Repository 3: Volumes &amp;amp; Ports 4: Troubleshooting(故障排除) 5: Docker Compose 1: Process Management 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # Show all running docker containers docker ps # Show all docker containers docker ps -a</description></item><item><title>01-docker-compose搭建redis cluster</title><link>https://lppgo.github.io/post/database/009-docker-compose%E6%90%AD%E5%BB%BAredis-cluster/</link><pubDate>Thu, 02 Jun 2022 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/database/009-docker-compose%E6%90%AD%E5%BB%BAredis-cluster/</guid><description>docker-compose搭建redis cluster 一: Redis Cluster 集群 二: 主从复制模式 三: 哨兵模式 三: Cluster 模式 3.1 redis.conf 3.2 目录结构 3.3 docker-compose 编排文件 3.4 测试 Redis 集群 3.5 Redis 集群</description></item><item><title>02-Go TestBenchmark</title><link>https://lppgo.github.io/post/golang/024_go-testbenchmark/</link><pubDate>Tue, 24 May 2022 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/golang/024_go-testbenchmark/</guid><description>Go TestBenchmark笔记 Table of Contents ================= Table of Contents Go Test Benchmark 1.1 go test benchmark 示例 1.2 go test benchmark benchstat 比较工具 Go Test Benchmark 在 Go 中，通过撰写 Benchmark 函数可以很方便地对某个功能点进行性</description></item><item><title>01-消息队列Kafka和Pulsar选型</title><link>https://lppgo.github.io/post/%E4%B8%AD%E9%97%B4%E4%BB%B6/001-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97kafka%E5%92%8Cpulsar%E9%80%89%E5%9E%8B/</link><pubDate>Thu, 17 Mar 2022 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/%E4%B8%AD%E9%97%B4%E4%BB%B6/001-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97kafka%E5%92%8Cpulsar%E9%80%89%E5%9E%8B/</guid><description>消息队列Kafka和Pulsar选型 Table of Contents Table of Contents 1: 业务场景 1.1 业务场景描述 1.2 业务场景 feature 2：消息中间件 3: Kafka 特性 4: Pulsar 特性 5: Kafka 和 Pulsar 对比 1: 业务场景 https://mp.weixin.qq.com/s/K6xj4LfplB16Q_DfQL75PA 1.1</description></item><item><title>01-git仓库gomod私有化</title><link>https://lppgo.github.io/post/golang/028_git%E4%BB%93%E5%BA%93gomod%E7%A7%81%E6%9C%89%E5%8C%96/</link><pubDate>Tue, 15 Mar 2022 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/golang/028_git%E4%BB%93%E5%BA%93gomod%E7%A7%81%E6%9C%89%E5%8C%96/</guid><description>git仓库gomod私有化 1: go module 私有仓库使用 1 2 3 4 5 6 7 8 9 10 11 12 13 (1) 修改hosts (2) go env -w GOINSECURE=&amp;#34;gitlab.yuliangtec.cn&amp;#34; go env -w GONOSUMDB=&amp;#34;gitlab.yuliangtec.cn&amp;#34; go env -w GONOPROXY=&amp;#34;gitlab.yuliangtec.cn&amp;#34; go env -w GOPRIVATE=&amp;#34;gitlab.yuliangtec.cn&amp;#34; // (3) go get go get com.yuliangtec.luna.proto // (4) git</description></item><item><title>02-GRPC_Makefile</title><link>https://lppgo.github.io/post/golang/029_grpc_makefile/</link><pubDate>Tue, 15 Mar 2022 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/golang/029_grpc_makefile/</guid><description>GRPC Makefile脚本 Makefile文件内容如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44</description></item><item><title>01-Go Dockerfile</title><link>https://lppgo.github.io/post/golang/026_godockerfile%E6%A8%A1%E6%9D%BF/</link><pubDate>Thu, 10 Mar 2022 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/golang/026_godockerfile%E6%A8%A1%E6%9D%BF/</guid><description>Go Dockerfile模板 1： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 FROMgolang:alpine AS builderLABEL stage=gobuilder ENV CGO_ENABLED 0ENV GOOS linuxENV GOPROXY https://goproxy.cn,directWORKDIR/buildADD go.mod .ADD go.sum .RUN go mod downloadCOPY . .RUN go build -ldflags=&amp;#34;-s -w&amp;#34; -o /app/hello ./hello.goFROMalpineRUN apk update</description></item><item><title>02-适用于Go项目的Makefile指南</title><link>https://lppgo.github.io/post/golang/027_%E9%80%82%E7%94%A8%E4%BA%8Ego%E9%A1%B9%E7%9B%AE%E7%9A%84makefile%E6%8C%87%E5%8D%97/</link><pubDate>Thu, 10 Mar 2022 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/golang/027_%E9%80%82%E7%94%A8%E4%BA%8Ego%E9%A1%B9%E7%9B%AE%E7%9A%84makefile%E6%8C%87%E5%8D%97/</guid><description>适用于Go项目的Makefile指南 Table of Contents ================= Table of Contents 1: Premise 2: Makefile 语法 3: Go 项目 4: supplementary instruction 1: Premise 会使用 go 写项目 会使用 Makefile 2: Makefile 语法 1 2 3 4 5 6 7 8 9 10 11 12 PROJECT=&amp;#34;example&amp;#34; default: echo</description></item><item><title>01-Go-transaction事务几种方式</title><link>https://lppgo.github.io/post/golang/025_go-transaction%E4%BA%8B%E5%8A%A1%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</link><pubDate>Mon, 07 Feb 2022 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/golang/025_go-transaction%E4%BA%8B%E5%8A%A1%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</guid><description>Go-transaction事务几种方式 1：方式一 这种写法非常朴实，程序流程也非常明确，但是事务处理与程序流程嵌入太深，容易遗漏，造成严重的</description></item><item><title>01-ElasticSearch7-Restful APIs</title><link>https://lppgo.github.io/post/es/001-elasticsearch7-restapis/</link><pubDate>Fri, 24 Dec 2021 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/es/001-elasticsearch7-restapis/</guid><description>ElasticSearch7-Restful APIs * [1: /ES-API/说明](#1-es-api说明) * [2: Cluster - APIs](#2-cluster---apis) * [2.1 查询集群状态](#21-查询集群状态) * [2.2 查询集群索引信息](#22-</description></item><item><title>01-Go Test笔记</title><link>https://lppgo.github.io/post/golang/023_go-test%E7%AC%94%E8%AE%B0/</link><pubDate>Tue, 21 Dec 2021 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/golang/023_go-test%E7%AC%94%E8%AE%B0/</guid><description>Go Test笔记 Go Test 一个完整的单测指令可以是 go test -v -cover -gcflags=all=-l -coverprofile=coverage.out -gcflags=all=-l 防止编译器内联优化导致单测出现问题 1.1 go test go test -run=^TestDo -v ./ 这里介绍几个常用的参数： -bench regexp 执行相</description></item><item><title>01-Grpc with TLS/SSL</title><link>https://lppgo.github.io/post/golang/021-grpc-witch-tls/</link><pubDate>Fri, 17 Dec 2021 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/golang/021-grpc-witch-tls/</guid><description>Grpc with TLS/SSL 1 Grpc 配置 TLS/SSL 1.1 使用 openssl 生成证书 cert 2 Server 服务端 3 Client 客户端 1 Grpc 配置 TLS/SSL gRPC 支持身份验证（auth）。将它添加到您的项目中很简单。您所要做的就是使用几</description></item><item><title>01-docker log管理和时区设置</title><link>https://lppgo.github.io/post/dockerk8s/013-docker-log%E7%AE%A1%E7%90%86%E5%92%8C%E6%97%B6%E5%8C%BA%E8%AE%BE%E7%BD%AE/</link><pubDate>Thu, 16 Dec 2021 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/dockerk8s/013-docker-log%E7%AE%A1%E7%90%86%E5%92%8C%E6%97%B6%E5%8C%BA%E8%AE%BE%E7%BD%AE/</guid><description>docker log管理和时区设置 1：docker log 1.1 docker log Description 1.2 磁盘占用分析 1.2.1 df -ah 查看系统中文件的使用情况 1.2.2 du -sh 查看当前目录下各个文件及目录占用空间大小 1.2.3</description></item><item><title>01-go使用Linux内核端口复用进行LoadBalance</title><link>https://lppgo.github.io/post/golang/019-go%E4%BD%BF%E7%94%A8linux%E5%86%85%E6%A0%B8%E7%AB%AF%E5%8F%A3%E5%A4%8D%E7%94%A8%E8%BF%9B%E8%A1%8Cloadbalance/</link><pubDate>Tue, 12 Oct 2021 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/golang/019-go%E4%BD%BF%E7%94%A8linux%E5%86%85%E6%A0%B8%E7%AB%AF%E5%8F%A3%E5%A4%8D%E7%94%A8%E8%BF%9B%E8%A1%8Cloadbalance/</guid><description>1 查看 Linux Kernal 2 Golang 如何使用端口复用 2.1 说明 2.2 Go ReusePort 2.2.1 go server 2.2.2 调用测试 2.2.3 端口复用 REUSEPORT 好处 1 查看 Linux Kernal socket 五元组 {&amp;lt;protocol&amp;gt;, &amp;lt;src addr&amp;gt;, &amp;lt;src port&amp;gt;, &amp;lt;dest addr&amp;gt;, &amp;lt;dest port&amp;gt;} uname -a Linux 3.9 内核引入了 SO_REU</description></item><item><title>01-grpc安装(cpp和go)</title><link>https://lppgo.github.io/post/golang/017-grpc%E5%AE%89%E8%A3%85cpp%E5%92%8Cgo/</link><pubDate>Fri, 08 Oct 2021 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/golang/017-grpc%E5%AE%89%E8%A3%85cpp%E5%92%8Cgo/</guid><description>1 c++ 配置 GRPC 1.1 setup dir 1.2 install cmake 1.3 Install other required tools 1.4 git clone grpc repo 1.5 Build and install gRPC and Protocol Buffers 1.6 编写 proto 文件 1.7 编写 server/client 文件 1.8 执行 2 golang grpc 环境搭建 2.1 Prerequisites golang protobuffer 2.2 Get the example code 1 c++ 配置 GRPC https://grpc.io/docs/languages/cpp/quickstart/ 1.1 setup dir 1</description></item><item><title>011-docker部署gitlab</title><link>https://lppgo.github.io/post/dockerk8s/011-docker%E9%83%A8%E7%BD%B2gitlab/</link><pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/dockerk8s/011-docker%E9%83%A8%E7%BD%B2gitlab/</guid><description>docker部署gitlab 1：gitlab docker 镜像 pull 2：启动脚本 3：修改gitlab.rb 4：修改 password 1：gitlab docker 镜像 pull docker pull gitlab/gitlab-ce:latest 新建目录~</description></item><item><title>01-note笔记</title><link>https://lppgo.github.io/post/others/005-note/</link><pubDate>Sat, 11 Sep 2021 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/others/005-note/</guid><description>note笔记 1：note 文件 1.1 alias 别名设置 1.2 git 局部代理 1.3 golang 交叉编译 1.4 date 和时间戳转换 1.5 minikube start 1.6 ip 相关 1.7 查看 Linux 详细 info 1.8 WSL2 压缩磁盘空间 1：note 文件</description></item><item><title>01-top命令基本使用</title><link>https://lppgo.github.io/post/linux/013-top%E5%91%BD%E4%BB%A4%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</link><pubDate>Sat, 11 Sep 2021 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/linux/013-top%E5%91%BD%E4%BB%A4%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</guid><description>1: Top 命令按键 2 Top 参数说明 2.1 CPU 状态信息 2.2 MemeState 2.3 Swap 交换内存 2.4 各进程状态监控 2.5 名词解释 2.5.1 VIRT：virtual memory usage 虚拟内存 2.5.2 RES：residen</description></item><item><title>01-zshrc 笔记</title><link>https://lppgo.github.io/post/others/001-zshrc/</link><pubDate>Sat, 11 Sep 2021 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/others/001-zshrc/</guid><description>zshrc笔记 1：zshrc 文件 2：其他说明 1：zshrc 文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39</description></item><item><title>01-C++VScode 配置</title><link>https://lppgo.github.io/post/c++/001-c++vscode%E9%85%8D%E7%BD%AE/</link><pubDate>Tue, 07 Sep 2021 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/c++/001-c++vscode%E9%85%8D%E7%BD%AE/</guid><description>C++ VScode 配置 1 C/C++基础 2 Vscode 安装 C/C++插件 3 task.json，launch.json 3.1 task.json 是编译当前文件的指令 3.2 launch.json 3.3 c_cpp_properties.json 4 cmake 1 C/C++基</description></item><item><title>01-Golang Files and I/O</title><link>https://lppgo.github.io/post/golang/015-file-and-io/</link><pubDate>Tue, 10 Aug 2021 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/golang/015-file-and-io/</guid><description>Golang Files and I/O Table of Contents Table of Contents 一：读文件 1.1 读一个 whole 文件 1.2 读一个文件，close 1.3 read file by line 二：写文件 2.1 Write the whole file 2.2 Open file for writing 2.3 Open file for appending 2.4 Write to a file 2.5 File permissions when creating files</description></item><item><title>01-微服务限流简单实现</title><link>https://lppgo.github.io/post/golang/013-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%99%90%E6%B5%81%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/</link><pubDate>Tue, 03 Aug 2021 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/golang/013-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%99%90%E6%B5%81%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/</guid><description>微服务限流简单实现 Table of Contents Table of Contents 一：限流的目的 二：限流实现方式 1：固定窗口 思想 实现 问题 2：滑动窗口 思想 实现 相对于固定窗口的改进 3：漏桶 思想 实现</description></item><item><title>01-docker registry http api v2</title><link>https://lppgo.github.io/post/dockerk8s/009-docker-registry-http-api-v2/</link><pubDate>Wed, 28 Jul 2021 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/dockerk8s/009-docker-registry-http-api-v2/</guid><description>docker registry http api v2 Table of Contents Table of Contents 1: Overview 2: 专有名词解释 3: Push image 过程 3.1 Pushing a Layer（上传层） 3.1.1 Existing Layers(检查层是否存在) 3.1.2 Starting An Upload(启动上传服</description></item><item><title>01-WSL2中配置docker远程tcp</title><link>https://lppgo.github.io/post/dockerk8s/001-wsl2%E4%B8%AD%E9%85%8D%E7%BD%AEdocker%E8%BF%9C%E7%A8%8Btcp/</link><pubDate>Tue, 27 Jul 2021 14:58:35 +0800</pubDate><guid>https://lppgo.github.io/post/dockerk8s/001-wsl2%E4%B8%AD%E9%85%8D%E7%BD%AEdocker%E8%BF%9C%E7%A8%8Btcp/</guid><description>WSL2中配置docker远程tcp 1: 修改 /lib/systemd/system/docker.service 2: 设置 DOCKER_HOST 环境变量 3: 修改 docker 启动配置文件/etc/default/docker 4: 重启 docker 1: 修改 /lib/systemd/system/docker.service 1 2 3</description></item><item><title>01-mysql数据库优化最完整指南</title><link>https://lppgo.github.io/post/database/005-mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%96%E6%9C%80%E5%AE%8C%E6%95%B4%E6%8C%87%E5%8D%97/</link><pubDate>Fri, 11 Jun 2021 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/database/005-mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%96%E6%9C%80%E5%AE%8C%E6%95%B4%E6%8C%87%E5%8D%97/</guid><description>阶段一: 数据库表设计 阶段二: 数据库部署 阶段三: 数据库性能优化 3.1 硬件配置 3.2 数据库配置优化 3.3 系统内核参数优化 阶段四: SQL 语句优化 阶段五: 数据库架构</description></item><item><title>01-Convert json to csv</title><link>https://lppgo.github.io/post/golang/011-convert-json-to-csv/</link><pubDate>Wed, 09 Jun 2021 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/golang/011-convert-json-to-csv/</guid><description>Table of Contents Table of Contents 1: Convert json to csv 1.1 json 文件 1.2 convert 1: Convert json to csv 1.1 json 文件 company.json 1 2 3 4 5 6 7 [ { &amp;#34;App&amp;#34;: &amp;#34;Instagram&amp;#34;, &amp;#34;Company&amp;#34;: &amp;#34;Facebook&amp;#34;, &amp;#34;Category&amp;#34;: &amp;#34;Social Media&amp;#34; }, { &amp;#34;App&amp;#34;: &amp;#34;WeChat&amp;#34;, &amp;#34;Company&amp;#34;: &amp;#34;Tencent&amp;#34;, &amp;#34;Category&amp;#34;: &amp;#34;Social Media&amp;#34; }, { &amp;#34;App&amp;#34;: &amp;#34;Hotstar&amp;#34;, &amp;#34;Company&amp;#34;: &amp;#34;Disney&amp;#34;, &amp;#34;Category&amp;#34;: &amp;#34;Entertainment&amp;#34; }, { &amp;#34;App&amp;#34;: &amp;#34;CNBC&amp;#34;, &amp;#34;Company&amp;#34;: &amp;#34;Comcast&amp;#34;, &amp;#34;Category&amp;#34;: &amp;#34;News&amp;#34; }, {</description></item><item><title>01-MInikube搭建</title><link>https://lppgo.github.io/post/dockerk8s/005-minikube%E6%90%AD%E5%BB%BA/</link><pubDate>Mon, 07 Jun 2021 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/dockerk8s/005-minikube%E6%90%AD%E5%BB%BA/</guid><description>[toc] 1: 安装 Docker 环境 1.1: 安装 docker 1.2: 配置 docker docker 加速 /etc/docker/daemon.json 重启 docker,使配置生效 1 2 3 sudo systemctl daemon-reload sudo systemctl restart docker 2: 安装 Minikube https://cloud.tencent.com/developer/article/1817826 2.1 使用普通的 minikube 2.1.1 更新软件源 2.1.2 更新软件包 2.1.3 安装</description></item><item><title>01-Nginx 常用配置清单.md</title><link>https://lppgo.github.io/post/linux/029-nginx%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E6%B8%85%E5%8D%95/</link><pubDate>Sun, 06 Jun 2021 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/linux/029-nginx%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E6%B8%85%E5%8D%95/</guid><description>Table of Contents 1: Nginx 配置 2: Listen Port 3: Access Log 4: Domain Name 5: Static Asset 6: Redirect 7: Reverse Proxy 8: Load Balance 8.1 RoundRobin 轮询(default) 8.2 weight (权重) 8.3 ip_hash（IP 绑定 ip_hash ） 8.4 url_hash 8.5 fair（第</description></item><item><title>01-nginx ssl双向认证.md</title><link>https://lppgo.github.io/post/linux/027-nginx-ssl%E5%8F%8C%E5%90%91%E8%AE%A4%E8%AF%81/</link><pubDate>Thu, 03 Jun 2021 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/linux/027-nginx-ssl%E5%8F%8C%E5%90%91%E8%AE%A4%E8%AF%81/</guid><description>Table of Contents Table of Contents 1: Nginx SSL Setting 2: openssl 配置准备 3: 创建 CA 根级证书 4: 创建 server 证书 5: 创建 client 证书 6: 配置 Nginx ssl 1: Nginx SSL Setting Nginx 对 SSL 双向认证支持的比较好，配置很简单： 1 2 3 4 5</description></item><item><title>01-Docker命令详解.md</title><link>https://lppgo.github.io/post/dockerk8s/003-docker%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 31 May 2021 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/dockerk8s/003-docker%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</guid><description>Table of Contents 1: docker 2: docker的使用命令 2.1 docker &amp;ndash;help 2.2 docker build 2.3 docker run 2.4 保存和加载镜像 3: docker Container 4: docker Network 5: docker volume 6: 发布镜像 7: Dockerfile 8: other 1: docker 容器技术 image container repository 1 2 3 4 5 6 7 8 9</description></item><item><title>01-shell快速入门.md</title><link>https://lppgo.github.io/post/linux/025-shell%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</link><pubDate>Sun, 30 May 2021 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/linux/025-shell%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</guid><description>Table of Contents Table of Contents 1: 第一个 shell 脚本 2: 变量 variable 3: 字符串 String 4: 数组 Array 5: Shell 参数传递 6: 运算 6.1 算数运算 6.2 关系运算 6.3 布尔运算 6.4 逻辑运算符 6.5 字符串运算符 6.6 文件检测运算</description></item><item><title>01-超便捷的搭建一个http/文件服务器</title><link>https://lppgo.github.io/post/linux/023-%E8%B6%85%E4%BE%BF%E6%8D%B7%E7%9A%84%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8/</link><pubDate>Thu, 27 May 2021 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/linux/023-%E8%B6%85%E4%BE%BF%E6%8D%B7%E7%9A%84%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid><description>1: 使用python快速搭建 2: 使用darkhttpd 2.1 安装darkhttpd 1: 使用python快速搭建 1: 进入目录 2: python启动httpp 文</description></item><item><title>01-Linux创建用户</title><link>https://lppgo.github.io/post/linux/005-linux%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7/</link><pubDate>Fri, 21 May 2021 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/linux/005-linux%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7/</guid><description>1: userdel删除用户 2: useradd创建用户 3: 新用户使用ssh登录验证 1: userdel删除用户 1 2 3 4 5 6 7 8 9 10 11 12 # 若使用userd</description></item><item><title>01-ToolBox</title><link>https://lppgo.github.io/post/linux/002-toolbox/</link><pubDate>Thu, 06 May 2021 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/linux/002-toolbox/</guid><description>ToolBox 工具箱 1: 压测工具 2: 网络相关 3: 3 4: 4 5: 5 6: 6 7: 7 8: 8 9: 9 10: 10 11: 11 12: 12 ToolBox 工具箱 1: 压测工具 2: 网络相关 工具类型 工具名称 site 教程 其他 内网穿透 花生壳 内网</description></item><item><title>02-Go编译相关</title><link>https://lppgo.github.io/post/golang/009-go%E7%BC%96%E8%AF%91%E7%9B%B8%E5%85%B3/</link><pubDate>Thu, 06 May 2021 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/golang/009-go%E7%BC%96%E8%AF%91%E7%9B%B8%E5%85%B3/</guid><description>1: go 交叉编译 1.1 查看可支 platform 1.2 Go 交叉编译命令 1.3 编译命令 1.4 编译时传入参数 2: shell 脚本 3: Makefile 1: go 交叉编译 1.1 查看可支 platform 1 2 3 go tool dist list // 支持的OS跟ARCH 1.2</description></item><item><title>03-Git常见的命令集合</title><link>https://lppgo.github.io/post/linux/021-git%E5%B8%B8%E8%A7%81%E7%9A%84%E5%91%BD%E4%BB%A4%E9%9B%86%E5%90%88/</link><pubDate>Thu, 06 May 2021 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/linux/021-git%E5%B8%B8%E8%A7%81%E7%9A%84%E5%91%BD%E4%BB%A4%E9%9B%86%E5%90%88/</guid><description>1: Git Config 1.1 Git global setup 全局设置 1.2 修改 git config 2: 仓库 Repository 管理 2.1 clone 仓库 2.2 Create a new repository 创建一个新仓库 2.3 Push an existing folder 推送一个已存在的文件夹 2.5 Push an existing Git repository 推送一个已存在的仓库</description></item><item><title>01-docker清理</title><link>https://lppgo.github.io/post/dockerk8s/007-docker%E6%B8%85%E7%90%86/</link><pubDate>Wed, 05 May 2021 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/dockerk8s/007-docker%E6%B8%85%E7%90%86/</guid><description>Docker 清理常用方法 1：Docker 积累的东西 2：使用 docker 清理 2.1：docker system 2.1: 清理已经停止的容器 2.2: 清理磁盘卷 2.3: 清理镜像 2.4: 清理网络 2.5: 使用 docker-compose 清理</description></item><item><title>01-localhost与127.0.0.1与0.0.0.0与本机IP的区别</title><link>https://lppgo.github.io/post/linux/019-localhost%E4%B8%8E127.0.0.1%E4%B8%8E0.0.0.0%E4%B8%8E%E6%9C%AC%E6%9C%BAip%E7%9A%84%E5%8C%BA%E5%88%AB/</link><pubDate>Sat, 01 May 2021 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/linux/019-localhost%E4%B8%8E127.0.0.1%E4%B8%8E0.0.0.0%E4%B8%8E%E6%9C%AC%E6%9C%BAip%E7%9A%84%E5%8C%BA%E5%88%AB/</guid><description>1: localhost 2: 127.0.0.1 3: 0.0.0.0 4: 本机 IP 1: localhost 首先 localhost 是一个域名，在过去它指向 127.0.0.1 这个 IP 地址。在操作系统支持 ipv6 后，它同时还指向 ipv6 的地址 [::1] 在 Windows 中，这个域名是预定义的，从</description></item><item><title>01-Go语言 grpc入门教程</title><link>https://lppgo.github.io/post/golang/007-go%E8%AF%AD%E8%A8%80-grpc%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</link><pubDate>Wed, 28 Apr 2021 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/golang/007-go%E8%AF%AD%E8%A8%80-grpc%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</guid><description>go 语言 grpc 入门教程 1: 安装 go 语言 grpc 包 2:安装 protobuf 编译器 2.1 安装 protoc 编译器 2.2 安装编译器 go 语言插件 3: Example 目录结构 4: 定义服务 5: 编译 proto 协议文件 6: 实现服务端代码 7</description></item><item><title>01-Rust基本语法</title><link>https://lppgo.github.io/post/rust/003-rust%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</link><pubDate>Tue, 27 Apr 2021 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/rust/003-rust%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</guid><description>rust 基本语法 1: 变量 2: float 类型 3: 复合类型:tuple 元组，arrary,slice 4: 字符串 5: 条件分支 6: 循环语句 7: 所有权 ownership 7.1 所有权&amp;mdash;变量</description></item><item><title>01-win10安装Rust步骤</title><link>https://lppgo.github.io/post/rust/001-win10%E5%AE%89%E8%A3%85rust%E6%AD%A5%E9%AA%A4/</link><pubDate>Sun, 25 Apr 2021 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/rust/001-win10%E5%AE%89%E8%A3%85rust%E6%AD%A5%E9%AA%A4/</guid><description>1: 首先配置环境变量 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # 修改为国内镜像 # 由于rustup的官方服务器在国外，如果直接按照rust官网的方式安</description></item><item><title>01-Golang net/http 性能优化</title><link>https://lppgo.github.io/post/golang/005-net.http-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</link><pubDate>Sat, 24 Apr 2021 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/golang/005-net.http-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</guid><description>Golang net/http 性能优化 1: 使用 DefaultClient 2: 使用默认的 DefaultTransport 3: 解决办法是自己设置 DefaultMaxIdleConnsPerHost Golang net/http 性能优化 Go 语言内置 net\http 包十分优秀，我们通过这个包可以很方便的去实现 HTTP 的客户端和服务</description></item><item><title>01-Linux Manual</title><link>https://lppgo.github.io/post/linux/015-linux-manual/</link><pubDate>Mon, 19 Apr 2021 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/linux/015-linux-manual/</guid><description>1: 文件 1.1 查看文件内容 1.1.1 head 1.1.2 tail 1.1.3 cat 1.1.4 nl 1.1.5 more 1.2 创建 1.2.1 touch 1.2.2 mkdir 1.2.3 mktemp 1.3 删除 1.3.1 rm 1.3.2 rmdir 1.4 查找文件 1.4.1 find 1.4.2 locate 1.5 ls 1.6 pwd 1.7 wc 1.8 chattr 1.9 paste 1.10 stat 1.11 grep 1.12 sed 1.12.1 执行多个命令 1.12.2 从</description></item><item><title>01-Go开发效率神器汇总</title><link>https://lppgo.github.io/post/golang/001-go%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E7%A5%9E%E5%99%A8%E6%B1%87%E6%80%BB/</link><pubDate>Sat, 17 Apr 2021 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/golang/001-go%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E7%A5%9E%E5%99%A8%E6%B1%87%E6%80%BB/</guid><description>Table of Contents Table of Contents 1：开发工具 2：调试工具 3：网络工具 1：开发工具 1: sql2go sql 语句转换为 Go 结构体，使用 ddl。 http://stming.cn/tool/sql2go.html 2: json2go 将 json 格式转为 Go struct https://mholt.github.io/json-to-go/ 3: toml2go 将编码后的 toml 文</description></item><item><title>01-Go格式化占位符汇总</title><link>https://lppgo.github.io/post/golang/002-go%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%8D%A0%E4%BD%8D%E7%AC%A6%E6%B1%87%E6%80%BB/</link><pubDate>Sat, 17 Apr 2021 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/golang/002-go%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%8D%A0%E4%BD%8D%E7%AC%A6%E6%B1%87%E6%80%BB/</guid><description>Go格式化占位符汇总 1：通用占位符 placeholder 2：布尔型 bool 3: 整型 4: 浮点型与复数 5: 字符串和[]byte 6: 指针 Pointer 7: 宽度(精度)标识符 8：其他 falg</description></item><item><title>02-Go常用库积累</title><link>https://lppgo.github.io/post/golang/003-go%E5%B8%B8%E7%94%A8%E5%BA%93%E7%A7%AF%E7%B4%AF/</link><pubDate>Sat, 17 Apr 2021 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/golang/003-go%E5%B8%B8%E7%94%A8%E5%BA%93%E7%A7%AF%E7%B4%AF/</guid><description>1：日志库 2：配置库 3：存储相关 4：数据结构 5：CLI 命令行 6：web 框架 7：RPC 和微服务 7.1 Remote Procedure Call 7.1.1 原生 RPC 7.1.2 GRPC 7.1.2.1 GRPC 安装 7.1.2.2 GRPC 使用 7.1.2.3 grpc-middleware 7.1.2.4 GRPC 测试</description></item><item><title>01-加密技术,数字签名,数字证书</title><link>https://lppgo.github.io/post/linux/017-%E5%8A%A0%E5%AF%86%E6%8A%80%E6%9C%AF%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6/</link><pubDate>Fri, 16 Apr 2021 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/linux/017-%E5%8A%A0%E5%AF%86%E6%8A%80%E6%9C%AF%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6/</guid><description>. Table of Contents Table of Contents 1：前言 Perface 2：数字签名 digitial signature 2.1 什么是数字签名 2.1.1 生成数字签名 2.1.2 验证签名 2.2 数字签名算法（摘要算法 digest） 3：数字证书 (Digital Certificate, CA) 4：</description></item><item><title>01-Linux添加cron定时任务</title><link>https://lppgo.github.io/post/linux/011-linux%E6%B7%BB%E5%8A%A0cron%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</link><pubDate>Thu, 15 Apr 2021 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/linux/011-linux%E6%B7%BB%E5%8A%A0cron%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</guid><description>1: 安装 Cron 1.1 Ubuntu 下 crontab 的安装和使用 2: cron 使用 2.1: cron 基本命令 2.2: cron 定时任务脚本格式 2.3: 对 Cron 任务进行列表显示 2.2: 编辑 cron 定时任务脚本 2.4 sudo用户编辑/etc/c</description></item><item><title>02-修改ubuntu/centos默认编辑器为vim</title><link>https://lppgo.github.io/post/linux/003-%E4%BF%AE%E6%94%B9ubuntucentos%E9%BB%98%E8%AE%A4%E7%BC%96%E8%BE%91%E5%99%A8%E4%B8%BAvim/</link><pubDate>Thu, 15 Apr 2021 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/linux/003-%E4%BF%AE%E6%94%B9ubuntucentos%E9%BB%98%E8%AE%A4%E7%BC%96%E8%BE%91%E5%99%A8%E4%B8%BAvim/</guid><description>1: 直接在配置文件中修改 2: 使用系统管理工具 update-alternatives 3: 完全删除 nano 1: 直接在配置文件中修改 1 echo export EDITOR=/usr/bin/vim &amp;gt;&amp;gt; ~/.bashrc 2: 使用系统管理工具 update-alternatives update-alternatives &amp;ndash;config editor 1 2 3 4 5 6 7 8 9 10 11 12 xxx:~$</description></item><item><title>03-在线修改大表结构pt-online-schema-change</title><link>https://lppgo.github.io/post/database/003-%E5%9C%A8%E7%BA%BF%E4%BF%AE%E6%94%B9%E5%A4%A7%E8%A1%A8%E7%BB%93%E6%9E%84pt-online-schema-change/</link><pubDate>Thu, 15 Apr 2021 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/database/003-%E5%9C%A8%E7%BA%BF%E4%BF%AE%E6%94%B9%E5%A4%A7%E8%A1%A8%E7%BB%93%E6%9E%84pt-online-schema-change/</guid><description>1: 使用场景 Scenario 2: 在线修改大表的可能影响 3: pt-online-schema-change 介绍 4: 解决了什么问题 5: pt-online-schema-change 安装 6: pt-online-schema-change 使用 6.1 参数 6.2 为避免每次都要输入一堆参数，写个脚本复用一下，pt.sh</description></item><item><title>04-grep命令基本使用</title><link>https://lppgo.github.io/post/linux/013-grep%E5%91%BD%E4%BB%A4%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</link><pubDate>Thu, 15 Apr 2021 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/linux/013-grep%E5%91%BD%E4%BB%A4%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</guid><description>1: grep 匹配包含 &amp;lsquo;字符串&amp;rsquo;的行 2: grep 匹配不包含 &amp;lsquo;字符串&amp;rsquo;的行，反向匹配 3: grep -E 同时匹配多个关键字–&amp;</description></item><item><title>05-Linux基本命令</title><link>https://lppgo.github.io/post/linux/007-linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</link><pubDate>Thu, 15 Apr 2021 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/linux/007-linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</guid><description>1: 系统的关机、重启以及登出 2: 文件和目录 3: Linux 查看磁盘 io 的几种方法 4: 查看网卡流量方法 5: 使用 watch 命令，配合 ifconfig、more /proc/ne</description></item><item><title>01-使用Github Actions自动构建博客</title><link>https://lppgo.github.io/post/others/003-%E4%BD%BF%E7%94%A8github-actions%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E5%8D%9A%E5%AE%A2/</link><pubDate>Wed, 14 Apr 2021 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/others/003-%E4%BD%BF%E7%94%A8github-actions%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E5%8D%9A%E5%AE%A2/</guid><description>1: 使用 Hugo 和 Github Page 搭建 Blogs 2: 更新设置 themes 等操作，保证正常可用 3: Create SSH Deploy Key 3.1 生成 key 3.2 在 GitHub 仓库设置 Deploy Keys 和 Secrets 4: 编写 Actions 配置文件 5: 编写 deploy.sh 脚本 6: 在 Github Actions 查看执行情况</description></item><item><title>01-Mysql 优化工具</title><link>https://lppgo.github.io/post/database/001-mysql%E4%BC%98%E5%8C%96%E5%B7%A5%E5%85%B7/</link><pubDate>Tue, 13 Apr 2021 17:16:49 +0800</pubDate><guid>https://lppgo.github.io/post/database/001-mysql%E4%BC%98%E5%8C%96%E5%B7%A5%E5%85%B7/</guid><description>MySql:优化工具 学习来自 [HB Chen](http://hbchen.com/) 1 2 3 4 cd /etc/ (my.conf所在目录) wget http://www.day32.com/MySQL/tuning-primer.sh chmod +x tuning-primer.sh ./tuning-primer.sh</description></item><item><title>02-Windows &amp; WSL2 代理学习记录</title><link>https://lppgo.github.io/post/linux/001-windows-wsl2-%E4%BB%A3%E7%90%86%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</link><pubDate>Tue, 13 Apr 2021 17:16:49 +0800</pubDate><guid>https://lppgo.github.io/post/linux/001-windows-wsl2-%E4%BB%A3%E7%90%86%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</guid><description>Windows WSL2 代理学习记录 1: Proxy 服务 2: 客户端 3: 在 Windows 设置 proxy 4: 在 WSL2 设置 proxy，使用宿主机代理 Windows WSL2 代理学习记录 1: Proxy 服务 楼主用的 monocloud,用了 3 年</description></item><item><title>01-基本数据结构</title><link>https://lppgo.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/001-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link><pubDate>Wed, 07 Apr 2021 14:58:35 +0800</pubDate><guid>https://lppgo.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/001-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid><description>1: 字符串 String 2: 数组 Array 3: 链表 LinkedList 4: 栈 Stack 5：队列 Queue 5.1 普通队列 Queue 5.2 双端队列 Deque 6: 散列表 Hash 7: 树 Tree 7.1 满二叉树 Full Binary Tree 7.2 完全二叉树 Complete Binary Tree 7.3 二叉查找树 Binary Search Tree 7.4 AVL 树</description></item><item><title>02-文章 2</title><link>https://lppgo.github.io/post/others/002-%E6%96%87%E7%AB%A02/</link><pubDate>Tue, 06 Apr 2021 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/others/002-%E6%96%87%E7%AB%A02/</guid><description>Hello World Hello World 1 2 3 func main(){ fmt.Println(&amp;#34;hello Hugo blog world!) } 这是博客正文 222</description></item><item><title/><link>https://lppgo.github.io/post/linux/009-%E5%A6%82%E4%BD%95%E8%A7%84%E8%8C%83git-commit%E6%8F%90%E4%BA%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/linux/009-%E5%A6%82%E4%BD%95%E8%A7%84%E8%8C%83git-commit%E6%8F%90%E4%BA%A4/</guid><description>title: &amp;ldquo;02-如何规范 git commit 提交&amp;rdquo; author: &amp;ldquo;lucas&amp;rdquo; # 文章作者 description: &amp;ldquo;如何规范 git commit 提交&amp;hellip;&amp;rdquo; date: 2021-04-14 lastmod: 2021-04-14 tags: #</description></item></channel></rss>