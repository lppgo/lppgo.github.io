<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>包管理 on Even - A super concise theme for Hugo</title><link>https://lppgo.github.io/tags/%E5%8C%85%E7%AE%A1%E7%90%86/</link><description>Recent content in 包管理 on Even - A super concise theme for Hugo</description><generator>Hugo</generator><language>en</language><lastBuildDate>Mon, 08 Apr 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://lppgo.github.io/tags/%E5%8C%85%E7%AE%A1%E7%90%86/index.xml" rel="self" type="application/rss+xml"/><item><title>015-pip命令说明</title><link>https://lppgo.github.io/post/python/015-pip%E5%91%BD%E4%BB%A4%E8%AF%B4%E6%98%8E/</link><pubDate>Mon, 08 Apr 2024 00:00:00 +0000</pubDate><guid>https://lppgo.github.io/post/python/015-pip%E5%91%BD%E4%BB%A4%E8%AF%B4%E6%98%8E/</guid><description>&lt;p>[toc]&lt;/p>
&lt;h1 id="table-of-contents">Table of Contents&lt;/h1>
&lt;h1 id="1pip-命令说明">1：pip 命令说明&lt;/h1>
&lt;h2 id="11-安装-pip">1.1: 安装 pip&lt;/h2>
&lt;ul>
&lt;li>&lt;code>python -m pip --version&lt;/code>:&lt;/li>
&lt;/ul>
&lt;h2 id="12-安装-python-库">1.2: 安装 Python 库&lt;/h2>
&lt;ul>
&lt;li>&lt;code>pip install requests&lt;/code>: 它会自动处理库及其依赖关系&lt;/li>
&lt;/ul>
&lt;h2 id="13-升级库">1.3: 升级库&lt;/h2>
&lt;ul>
&lt;li>&lt;code>pip list --outdated # 查看待升级库&lt;/code>&lt;/li>
&lt;li>&lt;code>pip upgrade &amp;lt;package_name&amp;gt; # 升级指定库&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="14-卸载库">1.4: 卸载库&lt;/h2>
&lt;ul>
&lt;li>&lt;code>pip uninstall &amp;lt;package_name&amp;gt;&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="15-搜索库">1.5: 搜索库&lt;/h2>
&lt;ul>
&lt;li>&lt;code>pip search &amp;lt;keyword&amp;gt;&lt;/code>: 比如查找与机器学习相关的库，你可以输入 pip search machine learning&lt;/li>
&lt;/ul>
&lt;h2 id="16-查看已安装库详细信息">1.6: 查看已安装库详细信息&lt;/h2>
&lt;ul>
&lt;li>&lt;code>pip show &amp;lt;package_name&amp;gt;&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="17-只下载库而不安装">1.7: 只下载库而不安装&lt;/h2>
&lt;ul>
&lt;li>有时你可能需要离线环境安装包或者备份当前环境的依赖，那么可以使用 download 命令只下载不安装：&lt;/li>
&lt;li>&lt;code>pip download &amp;lt;package_name&amp;gt;&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="18-创建-requirements-文件">1.8: 创建 requirements 文件&lt;/h2>
&lt;ul>
&lt;li>在项目开发中，为了方便团队成员统一环境，我们可以创建一个包含所有依赖的 requirements 文件：&lt;/li>
&lt;li>&lt;code>pip freeze &amp;gt; requirements.txt&lt;/code>&lt;/li>
&lt;li>这会列出当前环境中所有已安装库及其版本，并保存到 requirements.txt 文件中。而要根据这个文件安装所有依赖，只需：&lt;/li>
&lt;li>&lt;code>pip install -r requirements.txt&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="19-指定库版本安装">1.9: 指定库版本安装&lt;/h2>
&lt;ul>
&lt;li>在某些情况下，你可能需要安装特定版本的库，比如安装 requests 库的 2.25.1 版本&lt;/li>
&lt;li>&lt;code>pip install requests==2.25.1&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="110-检查是否存在安全漏洞">1.10: 检查是否存在安全漏洞&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>pip 配合 Safety 工具可以检查已安装库的安全性：&lt;/p></description></item></channel></rss>